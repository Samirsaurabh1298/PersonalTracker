
import React, { useState, useEffect } from 'react';
import { Calendar, MapPin, TrendingUp, CloudRain, Wind, BarChart3, ArrowLeft, Loader2, ChevronDown } from 'lucide-react';
import { LineChart as RechartsLineChart, BarChart as RechartsBarChart, Line, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './App.css';

// Static location data
const LOCATIONS = [
  { name: 'Australia', lat: -25.2744, lon: 133.7751 },
  { name: 'Belgium', lat: 50.8503, lon: 4.3517 },
  { name: 'Brazil', lat: -14.2350, lon: -51.9253 },
  { name: 'China', lat: 35.8617, lon: 104.1954 },
  { name: 'Denmark', lat: 56.2639, lon: 9.5018 },
  { name: 'India', lat: 20.5937, lon: 78.9629 },
  { name: 'Sri Lanka', lat: 7.8731, lon: 80.7718 },
  { name: 'Thailand', lat: 15.8700, lon: 100.9925 }
];

// Parameters for detailed view
const PARAMETERS = [
  { key: 'temperature_2m', label: 'Temperature', color: '#ff7300' },
  { key: 'relative_humidity_2m', label: 'Relative Humidity', color: '#82ca9d' },
  { key: 'apparent_temperature', label: 'Apparent Temperature', color: '#8884d8' },
  { key: 'precipitation', label: 'Precipitation', color: '#00bcd4' },
  { key: 'surface_pressure', label: 'Sea Level Pressure', color: '#ff8042' },
  { key: 'wind_speed_10m', label: 'Wind Speed', color: '#0088fe' }
];

interface WeatherData {
  time: string[];
  temperature_2m_mean?: number[];
  temperature_2m_max?: number[];
  temperature_2m_min?: number[];
  precipitation_sum?: number[];
  wind_speed_10m_max?: number[];
  // Hourly data
  temperature_2m?: number[];
  relative_humidity_2m?: number[];
  apparent_temperature?: number[];
  precipitation?: number[];
  surface_pressure?: number[];
  wind_speed_10m?: number[];
}

interface ChartData {
  date: string;
  [key: string]: any;
}

export default function App() {
  const [currentPage, setCurrentPage] = useState<'overview' | 'details'>('overview');
  const [selectedLocations, setSelectedLocations] = useState<string[]>(['Australia']);
  const [startDate, setStartDate] = useState(() => {
    const date = new Date();
    date.setMonth(date.getMonth() - 1);
    return date.toISOString().split('T')[0];
  });
  const [endDate, setEndDate] = useState(() => {
    return new Date().toISOString().split('T')[0];
  });
  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);
  const [loading, setLoading] = useState(false);
  const [selectedParameters, setSelectedParameters] = useState<string[]>(['temperature_2m']);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showLocationDropdown, setShowLocationDropdown] = useState(false);
  const [showParameterDropdown, setShowParameterDropdown] = useState(false);

  const fetchWeatherData = async (isHourly = false) => {
    setLoading(true);
    try {
      // For now, use the first selected location
      const location = LOCATIONS.find(loc => selectedLocations.includes(loc.name)) || LOCATIONS[0];
      
      const timeframe = isHourly ? 'hourly' : 'daily';
      const params = isHourly 
        ? 'temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,surface_pressure,wind_speed_10m'
        : 'temperature_2m_mean,temperature_2m_max,temperature_2m_min,precipitation_sum,wind_speed_10m_max';
      
      const url = `https://archive-api.open-meteo.com/v1/archive?latitude=${location.lat}&longitude=${location.lon}&start_date=${startDate}&end_date=${endDate}&${timeframe}=${params}`;
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data[timeframe]) {
        setWeatherData(data[timeframe]);
      }
    } catch (error) {
      console.error('Error fetching weather data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchWeatherData(currentPage === 'details');
  }, [selectedLocations, startDate, endDate, currentPage]);

  const formatDateRange = () => {
    const start = new Date(startDate);
    const end = new Date(endDate);
    return `${start.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
  };

  const handleLocationToggle = (locationName: string) => {
    if (locationName === 'Select all') {
      if (selectedLocations.length === LOCATIONS.length) {
        setSelectedLocations([]);
      } else {
        setSelectedLocations(LOCATIONS.map(loc => loc.name));
      }
    } else {
      setSelectedLocations(prev => 
        prev.includes(locationName) 
          ? prev.filter(name => name !== locationName)
          : [...prev, locationName]
      );
    }
  };

  const prepareOverviewChartData = (): ChartData[] => {
    if (!weatherData?.time) return [];
    
    return weatherData.time.map((date, index) => ({
      date: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      avgTemp: weatherData.temperature_2m_mean?.[index] || 0,
      maxTemp: weatherData.temperature_2m_max?.[index] || 0,
      minTemp: weatherData.temperature_2m_min?.[index] || 0,
      precipitation: weatherData.precipitation_sum?.[index] || 0,
      windSpeed: weatherData.wind_speed_10m_max?.[index] || 0
    }));
  };

  const prepareDetailChartData = (): ChartData[] => {
    if (!weatherData?.time) return [];
    
    return weatherData.time.map((datetime, index) => {
      const data: ChartData = {
        date: new Date(datetime).toLocaleString('en-US', { month: 'short', day: 'numeric', hour: 'numeric' })
      };
      
      selectedParameters.forEach(param => {
        const paramData = weatherData[param as keyof WeatherData] as number[];
        if (paramData) {
          data[param] = paramData[index] || 0;
        }
      });
      
      return data;
    });
  };

  const handleChartClick = (chartType: string) => {
    setCurrentPage('details');
  };

  const renderCustomDatePicker = () => {
    if (!showDatePicker) return null;

    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    
    const prevMonth = new Date(currentYear, currentMonth - 1);
    const nextMonth = new Date(currentYear, currentMonth + 1);

    const getDaysInMonth = (date: Date) => {
      const year = date.getFullYear();
      const month = date.getMonth();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startingDayOfWeek = firstDay.getDay();

      const days = [];
      
      // Add empty cells for days before the first day of the month
      for (let i = 0; i < startingDayOfWeek; i++) {
        days.push(null);
      }
      
      // Add days of the month
      for (let day = 1; day <= daysInMonth; day++) {
        days.push(day);
      }
      
      return days;
    };

    return (
      <div className="custom-datepicker">
        <div className="datepicker-header">
          <div className="month-navigation">
            <button>&lt;</button>
            <span>{prevMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</span>
            <button>&gt;</button>
          </div>
          <div className="month-navigation">
            <button>&lt;</button>
            <span>{currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</span>
            <button>&gt;</button>
          </div>
        </div>
        
        <div className="calendar-grid">
          <div className="calendar-month">
            <div className="weekdays">
              {['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'].map(day => (
                <div key={day} className="weekday">{day}</div>
              ))}
            </div>
            <div className="days">
              {getDaysInMonth(prevMonth).map((day, index) => (
                <div key={index} className={`day ${day ? 'active' : 'empty'}`}>
                  {day}
                </div>
              ))}
            </div>
          </div>
          
          <div className="calendar-month">
            <div className="weekdays">
              {['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'].map(day => (
                <div key={day} className="weekday">{day}</div>
              ))}
            </div>
            <div className="days">
              {getDaysInMonth(currentDate).map((day, index) => (
                <div key={index} className={`day ${day ? 'active' : 'empty'} ${day === 19 ? 'selected' : ''}`}>
                  {day}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderLocationDropdown = () => {
    if (!showLocationDropdown) return null;

    return (
      <div className="custom-dropdown location-dropdown">
        {LOCATIONS.map(location => (
          <div 
            key={location.name} 
            className="dropdown-option"
            onClick={() => setSelectedLocations([location.name])}
          >
            <span className="option-text">{location.name}</span>
            <div className={`radio-button ${selectedLocations.includes(location.name) ? 'selected' : ''}`}></div>
          </div>
        ))}
        <div className="dropdown-footer">
          <button className="done-button" onClick={() => setShowLocationDropdown(false)}>Done</button>
        </div>
      </div>
    );
  };

  const renderParameterDropdown = () => {
    if (!showParameterDropdown) return null;

    return (
      <div className="custom-dropdown parameter-dropdown">
        {PARAMETERS.map(param => (
          <div 
            key={param.key} 
            className={`dropdown-option ${selectedParameters.includes(param.key) ? 'selected' : ''}`}
            onClick={() => {
              if (selectedParameters.includes(param.key)) {
                setSelectedParameters(prev => prev.filter(p => p !== param.key));
              } else if (selectedParameters.length < 2) {
                setSelectedParameters(prev => [...prev, param.key]);
              }
            }}
          >
            <span className="option-text">{param.label}</span>
          </div>
        ))}
      </div>
    );
  };

  const renderOverviewPage = () => {
    const chartData = prepareOverviewChartData();

    return (
      <div className="page-content">
        <div className="controls-bar">
          <div className="control-item" onClick={() => setShowDatePicker(!showDatePicker)}>
            <span>{formatDateRange()}</span>
            <ChevronDown className={`chevron ${showDatePicker ? 'open' : ''}`} />
            {renderCustomDatePicker()}
          </div>
          
          <div className="control-item" onClick={() => setShowLocationDropdown(!showLocationDropdown)}>
            <span>{selectedLocations.length === LOCATIONS.length ? 'All Countries Selected' : `${selectedLocations.length} Countries Selected`}</span>
            <ChevronDown className={`chevron ${showLocationDropdown ? 'open' : ''}`} />
            {renderLocationDropdown()}
          </div>
        </div>

        <div className="chart-section">
          <div className="chart-header">
            <div className="chart-icon">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2C10.9 2 10 2.9 10 4V12.3C9.4 12.9 9 13.9 9 15C9 17.2 10.8 19 13 19S17 17.2 17 15C17 13.9 16.6 12.9 16 12.3V4C16 2.9 15.1 2 14 2H12Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <circle cx="13" cy="15" r="2" fill="currentColor"/>
                <path d="M14 6V12" stroke="currentColor" strokeWidth="1" strokeLinecap="round"/>
                <path d="M14 8H15" stroke="currentColor" strokeWidth="1" strokeLinecap="round"/>
                <path d="M14 10H15" stroke="currentColor" strokeWidth="1" strokeLinecap="round"/>
              </svg>
            </div>
            <h2>Temperature</h2>
            <div className="parameter-selector-overview" onClick={() => setShowParameterDropdown(!showParameterDropdown)}>
              <span>Temperature</span>
              <ChevronDown className={`chevron ${showParameterDropdown ? 'open' : ''}`} />
              {currentPage === 'overview' && renderParameterDropdown()}
            </div>
          </div>
          
          <div className="chart-container-main" onClick={() => handleChartClick('temperature')}>
            <ResponsiveContainer width="100%" height={400}>
              <RechartsLineChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis 
                  dataKey="date" 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 12, fill: '#666' }}
                />
                <YAxis 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 12, fill: '#666' }}
                  label={{ value: 'Temperature (°C)', angle: -90, position: 'insideLeft' }}
                />
                <Tooltip />
                <Line 
                  type="monotone" 
                  dataKey="avgTemp" 
                  stroke="#ffd700" 
                  strokeWidth={3}
                  dot={false}
                />
              </RechartsLineChart>
            </ResponsiveContainer>
            <div className="chart-frequency">Daily</div>
          </div>
        </div>
      </div>
    );
  };

  const renderDetailsPage = () => {
    const chartData = prepareDetailChartData();

    return (
      <div className="page-content">
        <div className="page-header">
          <button 
            className="back-button"
            onClick={() => setCurrentPage('overview')}
          >
            <ArrowLeft className="icon" />
            Back to Overview
          </button>
          <h1 className="page-title">Detailed Weather Insights</h1>
        </div>

        <div className="controls-bar">
          <div className="control-item" onClick={() => setShowDatePicker(!showDatePicker)}>
            <span>{formatDateRange()}</span>
            <ChevronDown className={`chevron ${showDatePicker ? 'open' : ''}`} />
            {renderCustomDatePicker()}
          </div>
          
          <div className="control-item" onClick={() => setShowLocationDropdown(!showLocationDropdown)}>
            <span>{selectedLocations.length === LOCATIONS.length ? 'All Countries Selected' : `${selectedLocations.length} Countries Selected`}</span>
            <ChevronDown className={`chevron ${showLocationDropdown ? 'open' : ''}`} />
            {renderLocationDropdown()}
          </div>

          <div className="control-item" onClick={() => setShowParameterDropdown(!showParameterDropdown)}>
            <span>{selectedParameters.map(p => PARAMETERS.find(param => param.key === p)?.label).join(', ')}</span>
            <ChevronDown className={`chevron ${showParameterDropdown ? 'open' : ''}`} />
            {renderParameterDropdown()}
          </div>
        </div>

        <div className="chart-container large">
          <ResponsiveContainer width="100%" height={400}>
            <RechartsLineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="date" 
                tick={{ fontSize: 10 }}
                interval="preserveStartEnd"
              />
              <YAxis 
                yAxisId="left" 
                label={{ value: 'Temperature (°C)', angle: -90, position: 'insideLeft' }}
              />
              {selectedParameters.length > 1 && (
                <YAxis 
                  yAxisId="right" 
                  orientation="right"
                  label={{ value: 'Secondary Parameter', angle: 90, position: 'insideRight' }}
                />
              )}
              <Tooltip />
              <Legend />
              {selectedParameters.map((param, index) => {
                const paramConfig = PARAMETERS.find(p => p.key === param);
                return (
                  <Line
                    key={param}
                    yAxisId={selectedParameters.length > 1 && index === 1 ? "right" : "left"}
                    type="monotone"
                    dataKey={param}
                    stroke={paramConfig?.color || '#8884d8'}
                    name={paramConfig?.label || param}
                  />
                );
              })}
            </RechartsLineChart>
          </ResponsiveContainer>
        </div>
      </div>
    );
  };

  return (
    <div className="app">
      <div className="sidebar">
        <div className="sidebar-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M3 3V21H21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            <path d="M9 9L12 6L16 10L20 6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>
      </div>
      <div className="main-content">
        <div className="app-header">
          <h1>Drilldown</h1>
        </div>
        
        {loading ? (
          <div className="loading-container">
            <Loader2 className="loading-spinner" />
            <p>Loading weather data...</p>
          </div>
        ) : (
          currentPage === 'overview' ? renderOverviewPage() : renderDetailsPage()
        )}
      </div>
    </div>
  );
}
